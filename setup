#!/bin/bash

# This is the setup script for my dotfiles. The idea is to be able to run this
# after cloning the repo on a Ubuntu(WSL) system and be setup and running
# very quickly.


# Function to check if a command exists
command_exists() {
  command -v "$@" >/dev/null 2>&1
}

# Function to check if a folder exists
folder_exists() {
  [ -d "$1" ] && return 0 || return 1  
}

# Function to print formatted text to the terminal in blue as information
fmt_info() {
  printf '%s\n' "${FMT_BOLD}${FMT_BLUE}" "$*" "$FMT_RESET"
}

# Function to print formatted text to the terminal in green as success
fmt_success() {
  printf '%s\n' "${FMT_BOLD}${FMT_GREEN}" "$*" "$FMT_RESET"
}

# Function to print formatted text to the terminal in red as error
fmt_error() {
  printf '%sError: %s%s\n' "${FMT_BOLD}${FMT_RED}" "$*" "$FMT_RESET" >&2
}

# Function to setup colors for the terminal
setup_color() {
  # Using Catppuccin colors
  FMT_RED=$(printf '\033[38;2;243;139;168m')
  FMT_GREEN=$(printf '\033[38;2;166;227;161m')
  FMT_YELLOW=$(printf '\033[38;2;249;226;175m')
  FMT_BLUE=$(printf '\033[38;2;137;180;250m')
  FMT_BOLD=$(printf '\033[1m')
  FMT_RESET=$(printf '\033[0m')
}

test_failure() {
  return 1
}

# Function to update the system
update_system() {
  fmt_info "
  ***************************************
  * Check for updates and install them  *
  ***************************************
  "
  sudo apt-get update -y && sudo apt-get upgrade -y
  if [ $? -eq 0 ]; then
    fmt_success "System updated successfully"
  else
    fmt_error "Failed to update system"
    exit 1
  fi
}

install_essential_packages() {
  fmt_info "
  ***************************************
  * Installing build-essential package  *
  ***************************************
  "
  sudo apt-get install build-essential -y
  sudo apt-get install python3-pip -y
  if [ $? -eq 0 ]; then
    fmt_success "build-essential package installed successfully"
  else
    fmt_error "Failed to install build-essential package"
    exit 1
  fi
}

# Function to clean up the system
clean_up() {
  fmt_info "
  **************************
  * Cleaning up the system *
  **************************
  "
  sudo apt-get autoclean -y && sudo apt-get clean -y && sudo apt-get autoremove -y

  if [ $? -eq 0 ]; then
    fmt_success "System cleaned up successfully"
  else
    fmt_error "Failed to clean up system"
    exit 1
  fi

}

# Function to run post installation steps for Homebrew
post_install_brew() {
  fmt_info "
  ***************************
  * Post installation steps *
  ***************************
  "
  brew install gcc

  if [ $? -eq 0 ]; then
    fmt_success "Post installation steps completed successfully"
  else
    fmt_error "Failed to complete post installation steps"
    exit 1
  fi
}

# Function to install Homebrew
install_brew() {
  fmt_info "
  ***********************
  * Installing Homebrew *
  ***********************
  "
  if folder_exists "/home/linuxbrew/.linuxbrew"; then
    if command_exists brew; then
      fmt_success "Homebrew already installed"
      return
    else
      eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
      post_install_brew
      return
    fi
  fi

  yes | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  if [ $? -eq 0 ]; then
    fmt_success "Homebrew installed successfully"
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    post_install_brew
  else
    fmt_error "Failed to install Homebrew"
    exit 1
  fi
}

# Function to install zsh
install_zsh() {
  fmt_info "
  ******************
  * Installing ZSH *
  ******************
  "
  brew install zsh
  if [ $? -eq 0 ]; then
    fmt_success "ZSH installed successfully"
  else
    fmt_error "Failed to install ZSH"
    exit 1
  fi
}

# Function to install Stow
install_stow() {
  if command_exists stow; then
    fmt_success "Stow already installed"
    return
  fi
  fmt_info "
  *******************
  * Installing Stow *
  *******************
  "
  brew install stow
  if [ $? -eq 0 ]; then
    fmt_success "Stow installed successfully"
  else
    fmt_error "Failed to install Stow"
    exit 1
  fi
}

# Function to install Oh My Zsh
install_oh_my_zsh() {
  if folder_exists "$HOME/.oh-my-zsh"; then
    fmt_success "Oh My Zsh already installed"
    return
  fi

  fmt_info "
  **************************
  * Installing Oh My Zsh   *
  **************************
  "
  yes | sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" --keep-zshrc yes
  if [ $? -eq 0 ]; then
    fmt_success "Oh My Zsh installed successfully"
  else
    fmt_error "Failed to install Oh My Zsh"
    exit 1
  fi
}

# Function to setup the shell
setup_shell() {
  # If this user's login shell is already "zsh", do not attempt to switch.
  if [ "$(basename -- "$SHELL")" = "zsh" ]; then
    fmt_info "Shell is already zsh. Skipping shell change."
    exec zsh -l
    return
  fi

  zsh="$(which zsh)"
  sudo chsh -s "$zsh" "$USER"
  
  # Check if the shell change was successful
  if [ $? -ne 0 ]; then
    fmt_error "chsh command unsuccessful."
    exit 1
  else
    export SHELL="$zsh"
    exec zsh -l
    echo "${FMT_GREEN}Shell successfully changed to '$zsh'.${FMT_RESET}"
  fi
}

# Function to clone ZSH plugins
clone_zsh_plugins() {
  # Install zsh-autosuggestions
  if folder_exists "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions"; then
    fmt_success "ZSH Autosuggestions already installed"
  else
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
  fi

  # Install zsh-syntax-highlighting
  if folder_exists "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"; then
    fmt_success "ZSH Syntax Highlighting already installed"
  else
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
  fi
  
  # Install zsh-completions
  if folder_exists "$HOME/.oh-my-zsh/custom/plugins/zsh-completions"; then
    fmt_success "ZSH Completions already installed"
  else
    git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions
  fi

  # Install you-should-use
  if folder_exists "$HOME/.oh-my-zsh/custom/plugins/you-should-use"; then
    fmt_success "You Should Use already installed"
  else
    git clone https://github.com/MichaelAquilina/zsh-you-should-use.git ${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/you-should-use
  fi
}

# Function to install Starship
install_starship() {
  if folder_exists /home/linuxbrew/.linuxbrew/bin/starship || command_exists starship; then
    fmt_success "Starship already installed"
    return
  fi
  fmt_info "
  ***********************
  * Installing Starship *
  ***********************
  "
  brew install starship
  if [ $? -eq 0 ]; then
    fmt_success "Starship installed successfully"
  else
    fmt_error "Failed to install Starship"
    exit 1
  fi
}

install_pyenv_build_dependencies() {
  fmt_info "
  ***************************************
  * Installing Pyenv build dependencies *
  ***************************************
  "
  sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
  libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
  xz-utils tk-dev libffi-dev liblzma-dev python3-openssl
}

# Function to install Pyenv
install_pyenv() {
  if command_exists pyenv; then
    fmt_success "Pyenv already installed"
    return
  fi
  fmt_info "
  ********************
  * Installing Pyenv *
  ********************
  "
  brew install pyenv
  if [ $? -eq 0 ]; then
    fmt_success "Pyenv installed successfully"
    # Just to make sure that the shell is setup correctly
    # And run the install_python_3_12 function below
    export PATH="$HOME/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"
  else
    fmt_error "Failed to install Pyenv"
    exit 1
  fi
}

install_python_3_12() {
  if pyenv versions | grep -q "3.12.0"; then
    fmt_success "Python 3.12.0 already installed"
    return
  fi
  fmt_info "
  **************************
  * Installing Python 3.12.0 *
  **************************
  "
  pyenv install 3.12.0
  if [ $? -eq 0 ]; then
    fmt_success "Python 3.12.0 installed successfully"
    pyenv global 3.12.0
  else
    fmt_error "Failed to install Python 3.12.0"
    exit 1
  fi
}

# Function to install Poetry
install_poetry() {
  if command_exists poetry; then
    fmt_success "Poetry already installed"
    return
  fi
  fmt_info "
  *********************
  * Installing Poetry *
  *********************
  "
  curl -sSL https://install.python-poetry.org | python3 -
  if [ $? -eq 0 ]; then
    fmt_success "Poetry installed successfully"
    mkdir $ZSH_CUSTOM/plugins/poetry
    poetry completions zsh > $ZSH_CUSTOM/plugins/poetry/_poetry
  else
    fmt_error "Failed to install Poetry"
    exit 1
  fi
}

# Function to install Eza CLI
install_eza() {
  if command_exists eza; then
    fmt_success "Eza already installed"
    return
  fi
  fmt_info "
  ***********************
  * Installing Eza CLI *
  ***********************
  "
  brew install eza
  if [ $? -eq 0 ]; then
    fmt_success "Eza CLI installed successfully"
  else
    fmt_error "Failed to install Eza CLI"
    exit 1
  fi

}

# Function to install Lazydocker
install_lazydocker() {
  if command_exists lazydocker; then
    fmt_success "Lazydocker already installed"
    return
  fi
  fmt_info "
  ***************************
  * Installing Lazydocker   *
  ***************************
  "
  brew install jesseduffield/lazydocker/lazydocker
  if [ $? -eq 0 ]; then
    fmt_success "Lazydocker installed successfully"
  else
    fmt_error "Failed to install Lazydocker"
    exit 1
  fi
}

# Function to install Lazygit
install_lazygit() {
  if command_exists lazygit; then
    fmt_success "Lazygit already installed"
    return
  fi
  fmt_info "
  **********************
  * Installing Lazygit *
    **********************
  "
  brew install jesseduffield/lazygit/lazygit
  if [ $? -eq 0 ]; then
    fmt_success "Lazygit installed successfully"
  else
    fmt_error "Failed to install Lazygit"
    exit 1
  fi
}

# Function to install Tmux
install_tmux() {
  if command_exists tmux; then
    fmt_success "Tmux already installed"
    return
  fi
  fmt_info "
  *******************
  * Installing Tmux *
  *******************
  "
  brew install tmux
  if [ $? -eq 0 ]; then
    fmt_success "Tmux installed successfully"
  else
    fmt_error "Failed to install Tmux"
    exit 1
  fi
}

# Function to clone Tmux Plugin Manager
clone_tmux_plugin_manager() {
  if folder_exists "$HOME/.tmux/plugins/tpm"; then
    fmt_success "Tmux Plugin Manager already installed"
    return
  fi
  fmt_info "
  *******************************
  * Cloning Tmux Plugin Manager *
  *******************************
  "
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
}

# Function to install neovim
install_neovim() {
  if command_exists nvim; then
    fmt_success "Neovim already installed"
    return
  fi
  fmt_info "
  ***********************
  * Installing Neovim   *
  ***********************
  "
  brew install neovim
  if [ $? -eq 0 ]; then
    fmt_success "Neovim installed successfully"
  else
    fmt_error "Failed to install Neovim"
    exit 1
  fi
}

install_fzf() {
  if command_exists fzf; then
    fmt_success "Fzf already installed"
    return
  fi
  fmt_info "
  ******************
  * Installing Fzf *
  ******************
  "
  brew install fzf
  if [ $? -eq 0 ]; then
    fmt_success "Fzf installed successfully"
  else
    fmt_error "Failed to install Fzf"
    exit 1
  fi
}

install_zsh_plugins_and_packages() {
  fmt_info "
  ***************************
  * Installing ZSH plugins  *
  ***************************
  "
  clone_zsh_plugins
  install_starship
  install_pyenv_build_dependencies
  install_pyenv
  install_python_3_12
  install_poetry
  install_eza
  install_lazydocker
  install_lazygit
  install_tmux
  clone_tmux_plugin_manager
  install_neovim
  install_fzf

  fmt_success "ZSH plugins installed successfully"
}

# Main function to run the script
main() {
  # Line just to ask the password to isntall run the script
  sudo -v

  # Line to setup colors to the terminal while running the script
  setup_color

  # Update the system and install build-essential package
  update_system
  install_essential_packages

  # Check if git and curl are installed
  if ! command_exists git; then
    fmt_error "Git is not installed. Please install it first"
    exit 1
  elif ! command_exists curl; then
    fmt_error "Curl is not installed. Please install it first"
    exit 1
  fi

  # Check if Homebrew is installed and install it if not
  # Also run post installation steps
  install_brew 

  # Check if zsh is installed and install it if not
  command_exists zsh || install_zsh

  # Check if Oh My Zsh is installed and install it if not
  install_oh_my_zsh

  # Check if Stow is installed and install it if not
  install_stow

  # Install ZSH plugins and packages
  install_zsh_plugins_and_packages

  # remove .zshrc to syumlink it with stow
  rm $HOME/.zshrc
  # Set symlink for .zshrc
  stow */

  # Clean up the system
  clean_up

  # Setup the shell
  setup_shell
}

main